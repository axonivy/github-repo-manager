pipeline {
  agent {
    dockerfile {
      dir 'build/docker'
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
  }

  triggers {
    cron '@midnight'
  }
  
  parameters {
    booleanParam name: 'dryRun', defaultValue: true, description: 'whether the build should push the changes or not'
    string(name: 'newVersion', defaultValue: '20.0.0-SNAPSHOT', description: 'The new ivy version with -SNAPSHOT e.g. 9.1.0-SNAPSHOT')
    string(name: 'branch', defaultValue: 'master', description: 'The branch to apply this change on e.g. master, release/11.1, release/10.0')
  }

  stages {
    stage('raise-version') {
      steps {
        script {
          currentBuild.description = "version: ${params.newVersion} branch: ${params.branch} dryRun: ${params.dryRun}"
          if (!params.dryRun) {
            build job: 'github-repo-manager_new-jira-version/master', parameters: [string(name: 'newJiraVersion', value: "${params.newVersion}")]
          }
          sh "git config --global user.name 'ivy-team'"
          sh "git config --global user.email 'info@ivyteam.ch'"
          withEnv(['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']) {
            withCredentials([file(credentialsId: 'github-ivyteam-token-repo-manager', variable: 'GITHUB_TOKEN_FILE')]) {
              sshagent(credentials: ['github-axonivy']) {
                sh """
                  export DRY_RUN=${params.dryRun}
                  build/raise-version/raise.sh ${params.newVersion} ${params.branch}
                """
              }
            }
          }
        }
      }
    }
    stage('Trigger Builds') {
      steps {
        build("core_p2")
        build("core_openapi")
        build("core_java-api")
        build("core_json-schema")
      }
    }
  }
}

def build(String jobName) {
  try {
    build job: "${jobName}/${params.branch}", wait: false, propagate: false
  } catch (hudson.AbortException ex) {
    echo "Job ${jobName} not found on branch ${params.branch}"
  }
}
