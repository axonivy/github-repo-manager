pipeline {
  agent {
    dockerfile {
      dir 'build/docker'
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
  }

  triggers {
    cron '@midnight'
  }

  parameters {
    booleanParam name: 'dryRun', defaultValue: true, description: 'whether the build should push the changes or not'
    string(
      name: 'engineUrl',
      description: 'Engine to use for conversion',
      defaultValue: 'https://dev.axonivy.com/permalink/dev/axonivy-engine.zip'
    )
    string(name: 'branch', defaultValue: 'master', description: 'The branch to apply this change on e.g. master, release/11.1, release/10.0')
  }

  stages {
    stage('raise-ivy-project-version') {
      steps {
        script {
          currentBuild.description = "branch: ${params.branch}"
          sh "git config --global user.name 'ivy-team'"
          sh "git config --global user.email 'info@ivyteam.ch'"
          withEnv(['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no -o LogLevel=error']) {
            withCredentials([file(credentialsId: 'github-ivyteam-token-repo-manager', variable: 'GITHUB_TOKEN_FILE')]) {
              sshagent(credentials: ['github-axonivy']) {
                sh """
                  export DRY_RUN=${params.dryRun}
                  build/raise-ivy-projects-version/raise.sh ${params.engineUrl} ${params.branch}
                """
                archiveArtifacts 'build/raise-ivy-projects-version/conversion*.txt'
              }
            }            
          }
          def errors = readFile 'build/raise-ivy-projects-version/conversionError.txt'
          if (errors != null && errors != "") {
            error 'build finished with errors: \n' + errors
          }
        }
      }
    }
  }
}
