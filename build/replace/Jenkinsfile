pipeline {
  agent {
    dockerfile {
      dir 'build/docker'
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '30'))
    disableConcurrentBuilds()
  }
  
  parameters {
    booleanParam name: 'dryRun', defaultValue: true, description: 'whether the build should push the changes or not. HINT: Could be easier to run this localy with the build/replace/replace.sh script directly'
    string(name: 'sedRegexp', defaultValue: '', description: '[REQUIRED] The sed replacement: s#search#replace#g')
    string(name: 'fileSelector', defaultValue: '', description: '[REQUIRED] Bash file selector e.g. folder/**/File.*')
    string(name: 'sourceBranch', defaultValue: '', description: '[REQUIRED] The branch to apply this change on e.g. master, release/11.1, release/10.0')
    string(name: 'newBranch', defaultValue: '', description: '[REQUIRED] The name of the new branch, which gets pushed if it is not a dry run')
    string(name: 'commitMessage', defaultValue: '', description: '[REQUIRED] The commit message')
  }

  stages {
    stage('replace') {
      when {
        expression { !params.sedRegexp.isEmpty() && !params.fileSelector.isEmpty() && !params.sourceBranch.isEmpty() && !params.newBranch.isEmpty() && !params.commitMessage.isEmpty() }
      }
      steps {        
        script {
          userId = currentBuild.getBuildCauses()[0].userId
          echo "BUILD_TRIGGERED_BY: ${userId}"

          currentBuild.description = "branch: ${params.sourceBranch} dryRun: ${params.dryRun}"
          sh "git config --global user.name 'ivy-team'"
          sh "git config --global user.email 'info@ivyteam.ch'"
          withEnv(['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']) {
            withCredentials([file(credentialsId: 'github-ivyteam-token-repo-manager', variable: 'GITHUB_TOKEN_FILE')]) {
              sshagent(credentials: ['github-axonivy']) {
                sh """
                  export DRY_RUN=${params.dryRun}
                  export BUILD_USER=${userId}
                  build/replace/replace.sh "${params.sedRegexp}" "${params.fileSelector}" "${params.sourceBranch}" "${params.newBranch}" "${params.commitMessage}"
                """
              }
            }
          }
        }
      }
    }
  }
}
